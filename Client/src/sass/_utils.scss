@use "sass:math";
@import '../../sass/colors';

$default-browser-context: 16px;

$shadows-list: (
    1: 0 11px 15px -7px $shadow-color-3,
    2: 0 24px 38px 3px $shadow-color-1,
    3: 0 9px 46px 8px $shadow-color-4
);

$shadows: (
    1: 0 0 4px 2px $shadow-color-1,
    2: 0 0 3px 3px $shadow-color-2,
    3: unquote(#{map-get($shadows-list, 1), map-get($shadows-list, 2), map-get($shadows-list, 3)})
);

@function rem($pixels, $context: $default-browser-context) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    @if (unitless($context)) {
        $context: $context * 1px;
    }
    @return math.div($pixels, $context) * 1rem;
}

@function calc-border-width($item) {
    @if (unitless($item)) {
        @return $item * 1px;
    }

    @return $item;
}

@function border-err-message($name) {
    @return '#{$name} list should contain either one or four items: top, right, bottom, left.';
}

@mixin border-err($name) {
    $message: border-err-message($name);
    @error unquote($message);
}

@mixin square($size, $radius: 0) {
    width: $size;
    height: $size;

    @if $radius != 0 {
        border-radius: $radius;
    }
}

@mixin rect($width, $height, $radius: 0) {
    width: $width;
    height: $height;

    @if $radius != 0 {
        border-radius: $radius;
    }
}

@mixin border($size: (1, 1, 1, 1), $style: (), $color: ()) {

    @if (length($size) == 1) {
        border-width: calc-border-width(nth($size, 1));
    } @else if (length($size) == 4) {
        border-top-width: calc-border-width(nth($size, 1));
        border-right-width: calc-border-width(nth($size, 2));
        border-bottom-width: calc-border-width(nth($size, 3));
        border-left-width: calc-border-width(nth($size, 4));
    } @else {
        @include border-err('Size');
    }

    @if (length($style) == 1) {
        border-style: nth($style, 1);
    } @else if (length($style) == 4) {
        border-top-style: nth($style, 1);
        border-right-style: nth($style, 2);
        border-bottom-style: nth($style, 3);
        border-left-style: nth($style, 4);
    } @else {
        @include border-err('Style');
    }

    @if (length($color) == 1) {
        border-color: nth($color, 1);
    } @else if (length($color) == 4) {
        border-top-color: nth($color, 1);
        border-right-color: nth($color, 2);
        border-bottom-color: nth($color, 3);
        border-left-color: nth($color, 4);
    } @else {
        @include border-err('Color');
    }
}

@mixin checkerboard($square-size: 6) {
    background-image:
        linear-gradient(45deg, $ID_Gray400 25%, $ID_Transparent 25%),
        linear-gradient(-45deg, $ID_Gray400 25%, $ID_Transparent 25%),
        linear-gradient(45deg, $ID_Transparent 75%, $ID_Gray400 75%),
        linear-gradient(-45deg, $ID_Transparent 75%, $ID_Gray400 75%);
    background-size: rem($square-size * 2) rem($square-size * 2);
    background-position: 0 0, 0 rem($square-size), rem($square-size) rem(-$square-size), rem(-$square-size) 0;
}
