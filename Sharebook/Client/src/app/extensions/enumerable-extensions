declare global {
  interface Array<T> {
    // Test<T>(this: Array<T>, action: (t: T) => void): void;
    //
    // containsSameObjectsAs<T>(this: Array<number>, collection2: Array<T>): boolean;

    toAddPostfix(postFix: string): Array<T>;
  }
}

// Array.prototype.Test = function(action: (t: any) => void): void {
//   for (let item of this) {
//     action(item);
//   }
// };
//
// Array.prototype.containsSameObjectsAs = function(collection2: []): boolean {
//   return ContainsSameObjectsAs(this, collection2);
// };

Array.prototype.toAddPostfix = function(postFixStr: string) {
  let _self = this as Array<string>;
  return _self.map(a => `${a}${postFixStr}`);
};

export {};
