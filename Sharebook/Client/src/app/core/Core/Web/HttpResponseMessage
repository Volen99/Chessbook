import IDisposable from "../../../c#-objects/TypeScript.NET-Core/packages/Core/source/Disposable/IDisposable";
import ArgumentNullException from "../../../c#-objects/TypeScript.NET-Core/packages/Core/source/Exceptions/ArgumentNullException";
import ArgumentOutOfRangeException
  from "../../../c#-objects/TypeScript.NET-Core/packages/Core/source/Exceptions/ArgumentOutOfRangeException";

export class HttpResponseMessage implements IDisposable {
  private static readonly defaultStatusCode: HttpStatusCode = HttpStatusCode.OK;

  private statusCode: HttpStatusCode;
  private headers: HttpResponseHeaders;
  private reasonPhrase: string;
  private requestMessage: HttpRequestMessage;
  private version: Version;
  private content: HttpContent;
  private disposed: boolean;

  get Version(): Version {
    return this.version;
  }

  set Version(value: Version) {
    if (value == null) {
      throw new ArgumentNullException("value");
    }
    CheckDisposed();

    this.version = value;
  }

  // public Content: HttpContent
  //   {
  //     get { return content; }
  //     set
  //     {
  //       CheckDisposed();
  //
  //       if (Logging.On)
  //       {
  //         if (value == null)
  //         {
  //           Logging.PrintInfo(Logging.Http, this, SR.net_http_log_content_null);
  //         }
  //         else
  //         {
  //           Logging.Associate(Logging.Http, this, value);
  //         }
  //       }
  //
  //       content = value;
  //     }
  //   }

  get Content(): HttpContent {
    return this.content;
  }

  set Content(value: HttpContent) {
    CheckDisposed();

    if (Logging.On) {
      if (value == null) {
        Logging.PrintInfo(Logging.Http, this, SR.net_http_log_content_null);
      } else {
        Logging.Associate(Logging.Http, this, value);
      }
    }

    this.content = value;
  }

  // public HttpStatusCode StatusCode
  //   {
  //     get { return statusCode; }
  //     set
  //     {
  //       if (((int)value < 0) || ((int)value > 999))
  //       {
  //         throw new ArgumentOutOfRangeException("value");
  //       }
  //       CheckDisposed();
  //
  //       statusCode = value;
  //     }
  //   }

  get StatusCode(): HttpStatusCode {
    return this.statusCode;
  }

  set HttpStatusCode(value: HttpStatusCode) {
    if ((value as number < 0) || (value as number > 999)) {
      throw new ArgumentOutOfRangeException("value");
    }

    CheckDisposed();

    this.statusCode = value;
  }

  // public string ReasonPhrase
  //   {
  //     get
  //     {
  //       if (reasonPhrase != null)
  //       {
  //         return reasonPhrase;
  //       }
  //       // Provide a default if one was not set
  //       return HttpStatusDescription.Get(StatusCode);
  //     }
  //     set
  //     {
  //       if ((value != null) && ContainsNewLineCharacter(value))
  //       {
  //         throw new FormatException(SR.net_http_reasonphrase_format_error);
  //       }
  //       CheckDisposed();
  //
  //       reasonPhrase = value; // It's OK to have a 'null' reason phrase
  //     }
  //   }

  get ReasonPhrase(): string {
    if (this.reasonPhrase != null) {
      return this.reasonPhrase;
    }
    // Provide a default if one was not set
    return HttpStatusDescription.Get(this.StatusCode);
  }

  set ReasonPhrase(value: string) {
    if ((value != null) && ContainsNewLineCharacter(value)) {
      throw new FormatException(SR.net_http_reasonphrase_format_error);
    }
    CheckDisposed();

    this.reasonPhrase = value; // It's OK to have a 'null' reason phrase
  }

  get Headers(): HttpResponseHeaders {
    if (this.headers == null) {
      this.headers = new HttpResponseHeaders();
    }

    return this.headers;
  }

  get RequestMessage(): HttpRequestMessage {
    return this.requestMessage;
  }

  set RequestMessage(value: HttpRequestMessage) {
    CheckDisposed();
    if (Logging.On && (value != null)) {
      Logging.Associate(Logging.Http, this, value);
    }

    this.requestMessage = value;
  }

  // public bool IsSuccessStatusCode
  //   {
  //     get { return ((int)statusCode >= 200) && ((int)statusCode <= 299); }
  //   }

    get IsSuccessStatusCode(): boolean {
      return ((this.statusCode as number >= 200) && (this.statusCode as number <= 299));
    }

    // public HttpResponseMessage(): this(defaultStatusCode)
    // {
    // }

   constructor(statusCode?: HttpStatusCode) {
    if (!statusCode) {
      statusCode = HttpResponseMessage.defaultStatusCode;
    }
      if (Logging.On) Logging.Enter(Logging.Http, this, ".ctor", "StatusCode: " + (int)statusCode + ", ReasonPhrase: '" + reasonPhrase + "'");

      if (((int)statusCode < 0) || ((int)statusCode > 999))
      {
        throw new ArgumentOutOfRangeException("statusCode");
      }

      this.statusCode = statusCode;
      this.version = HttpUtilities.DefaultVersion;

      if (Logging.On) Logging.Exit(Logging.Http, this, ".ctor", null);
    }

  public HttpResponseMessage EnsureSuccessStatusCode()
    {
      if (!IsSuccessStatusCode)
      {
        // Disposing the content should help users: If users call EnsureSuccessStatusCode(), an exception is
        // thrown if the response status code is != 2xx. I.e. the behavior is similar to a failed request (e.g.
        // connection failure). Users don't expect to dispose the content in this case: If an exception is
        // thrown, the object is responsible fore cleaning up its state.
        if (content != null)
        {
          content.Dispose();
        }

        throw new HttpRequestException(string.Format(System.Globalization.CultureInfo.InvariantCulture, SR.net_http_message_not_success_statuscode, (int)statusCode,
        ReasonPhrase));
      }
      return this;
    }

  public override string ToString()
    {
      StringBuilder sb = new StringBuilder();

      sb.Append("StatusCode: ");
      sb.Append((int)statusCode);

      sb.Append(", ReasonPhrase: '");
      sb.Append(ReasonPhrase ?? "<null>");

      sb.Append("', Version: ");
      sb.Append(version);

      sb.Append(", Content: ");
      sb.Append(content == null ? "<null>" : content.GetType().FullName);

      sb.Append(", Headers:\r\n");
      sb.Append(HeaderUtilities.DumpHeaders(headers, content == null ? null : content.Headers));

      return sb.ToString();
    }

  private bool ContainsNewLineCharacter(string value)
    {
      foreach (char character in value)
      {
        if ((character == HttpRuleParser.CR) || (character == HttpRuleParser.LF))
        {
          return true;
        }
      }
      return false;
    }

    #region IDisposable Members

  protected virtual void Dispose(bool disposing)
    {
      // The reason for this type to implement IDisposable is that it contains instances of types that implement
      // IDisposable (content).
      if (disposing && !disposed)
      {
        disposed = true;
        if (content != null)
        {
          content.Dispose();
        }
      }
    }

  public  Dispose(): void
    {
      Dispose(true);
      GC.SuppressFinalize(this);
    }

   // #endregion

  private  CheckDisposed(): void
    {
      if (disposed)
      {
        throw new ObjectDisposedException(this.GetType().FullName);
      }
    }
  }
