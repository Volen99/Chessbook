// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sharebook.Data;

namespace Sharebook.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210202082735_LongToInt")]
    partial class LongToInt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Sharebook.Data.Models.Post.Entities.HashtagEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndicesId")
                        .HasColumnType("int");

                    b.Property<long?>("IndicesId1")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndicesId1");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PostId");

                    b.ToTable("HashtagEntities");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Entities.Indices", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndexFirst")
                        .HasColumnType("int");

                    b.Property<int>("IndexSecond")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Indices");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Entities.MediaEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Directory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpandedURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndicesId")
                        .HasColumnType("int");

                    b.Property<long?>("IndicesId1")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaURLHttps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndicesId1");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PostId");

                    b.ToTable("MediaEntities");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Entities.SymbolEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndicesId")
                        .HasColumnType("int");

                    b.Property<long?>("IndicesId1")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndicesId1");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PostId");

                    b.ToTable("SymbolEntities");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Entities.UrlEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayedURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpandedURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndicesId")
                        .HasColumnType("int");

                    b.Property<long?>("IndicesId1")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndicesId1");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PostId");

                    b.ToTable("UrlEntities");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Entities.UserMentionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndicesId")
                        .HasColumnType("int");

                    b.Property<long?>("IndicesId1")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("ScreenName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndicesId1");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PostId");

                    b.ToTable("UserMentionEntities");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Contributors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FavoriteCount")
                        .HasColumnType("int");

                    b.Property<bool>("Favorited")
                        .HasColumnType("bit");

                    b.Property<string>("FullText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashtagsIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InReplyToScreenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InReplyToStatusId")
                        .HasColumnType("int");

                    b.Property<string>("InReplyToStatusIdStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InReplyToUserId")
                        .HasColumnType("int");

                    b.Property<string>("InReplyToUserIdStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuoteStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediasIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PossiblySensitive")
                        .HasColumnType("bit");

                    b.Property<bool>("PossiblySensitiveEditable")
                        .HasColumnType("bit");

                    b.Property<int>("QuoteCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("int");

                    b.Property<int>("RetweetCount")
                        .HasColumnType("int");

                    b.Property<bool>("Retweeted")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplementalLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SymbolsIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Truncated")
                        .HasColumnType("bit");

                    b.Property<string>("UrlsIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.Property<string>("UserMentionsIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId1");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Sharebook.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("AlwaysUseHttps")
                        .HasColumnType("bit");

                    b.Property<bool>("Blocking")
                        .HasColumnType("bit");

                    b.Property<string>("BusinessProfileState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanMediaTag")
                        .HasColumnType("bit");

                    b.Property<bool>("ContributorsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool>("DefaultProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("DefaultProfileImage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DiscoverableByEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("DiscoverableByMobilePhone")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DisplaySensitiveMedia")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndSleepHour")
                        .HasColumnType("int");

                    b.Property<int>("FavouritesCount")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FollowRequestSent")
                        .HasColumnType("bit");

                    b.Property<bool>("FollowedBy")
                        .HasColumnType("bit");

                    b.Property<int>("FollowersCount")
                        .HasColumnType("int");

                    b.Property<bool>("Following")
                        .HasColumnType("bit");

                    b.Property<int>("FriendsCount")
                        .HasColumnType("int");

                    b.Property<bool>("GeoEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCustomTimelines")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTranslationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTranslator")
                        .HasColumnType("bit");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListedCount")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Notifications")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinnedTweetIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileBackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileBackgroundImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileBackgroundImageUrlHttps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProfileBackgroundTile")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileBannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrlHttps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileLinkColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileSidebarBorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileSidebarFillColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProfileUseBackgroundImage")
                        .HasColumnType("bit");

                    b.Property<bool>("Protected")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireSomeConsent")
                        .HasColumnType("bit");

                    b.Property<string>("ScreenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SleepTimeEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("SmartMute")
                        .HasColumnType("bit");

                    b.Property<int>("StartSleepHour")
                        .HasColumnType("int");

                    b.Property<int>("StatusesCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeZone")
                        .HasColumnType("datetime2");

                    b.Property<string>("TranslatorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseCookiePersonalization")
                        .HasColumnType("bit");

                    b.Property<int>("UtcOffset")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("Visibility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisibilityYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Sharebook.Data.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Sharebook.Data.Models.UserPhoto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("UserPhotos");
                });

            modelBuilder.Entity("Sharebook.Data.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Entities.HashtagEntity", b =>
                {
                    b.HasOne("Sharebook.Data.Models.Post.Entities.Indices", "Indices")
                        .WithMany()
                        .HasForeignKey("IndicesId1");

                    b.HasOne("Sharebook.Data.Models.Post.Post", null)
                        .WithMany("Hashtags")
                        .HasForeignKey("PostId");

                    b.Navigation("Indices");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Entities.MediaEntity", b =>
                {
                    b.HasOne("Sharebook.Data.Models.Post.Entities.Indices", "Indices")
                        .WithMany()
                        .HasForeignKey("IndicesId1");

                    b.HasOne("Sharebook.Data.Models.Post.Post", null)
                        .WithMany("Medias")
                        .HasForeignKey("PostId");

                    b.OwnsOne("Sharebook.Data.Models.Post.Entities.ExtendedEntities.VideoInformationEntity", "VideoDetails", b1 =>
                        {
                            b1.Property<long>("MediaEntityId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("AspectRatio")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("DurationInMilliseconds")
                                .HasColumnType("int");

                            b1.HasKey("MediaEntityId");

                            b1.ToTable("MediaEntities");

                            b1.WithOwner()
                                .HasForeignKey("MediaEntityId");

                            b1.OwnsMany("Sharebook.Data.Models.Post.Entities.ExtendedEntities.VideoEntityVariant", "Variants", b2 =>
                                {
                                    b2.Property<long>("VideoInformationEntityMediaEntityId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .UseIdentityColumn();

                                    b2.Property<int>("Bitrate")
                                        .HasColumnType("int");

                                    b2.Property<string>("ContentType")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("URL")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("VideoInformationEntityMediaEntityId", "Id");

                                    b2.ToTable("VideoEntityVariant");

                                    b2.WithOwner()
                                        .HasForeignKey("VideoInformationEntityMediaEntityId");
                                });

                            b1.Navigation("Variants");
                        });

                    b.Navigation("Indices");

                    b.Navigation("VideoDetails");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Entities.SymbolEntity", b =>
                {
                    b.HasOne("Sharebook.Data.Models.Post.Entities.Indices", "Indices")
                        .WithMany()
                        .HasForeignKey("IndicesId1");

                    b.HasOne("Sharebook.Data.Models.Post.Post", null)
                        .WithMany("Symbols")
                        .HasForeignKey("PostId");

                    b.Navigation("Indices");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Entities.UrlEntity", b =>
                {
                    b.HasOne("Sharebook.Data.Models.Post.Entities.Indices", "Indices")
                        .WithMany()
                        .HasForeignKey("IndicesId1");

                    b.HasOne("Sharebook.Data.Models.Post.Post", null)
                        .WithMany("Urls")
                        .HasForeignKey("PostId");

                    b.Navigation("Indices");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Entities.UserMentionEntity", b =>
                {
                    b.HasOne("Sharebook.Data.Models.Post.Entities.Indices", "Indices")
                        .WithMany()
                        .HasForeignKey("IndicesId1");

                    b.HasOne("Sharebook.Data.Models.Post.Post", null)
                        .WithMany("UserMentions")
                        .HasForeignKey("PostId");

                    b.Navigation("Indices");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Post", b =>
                {
                    b.HasOne("Sharebook.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.OwnsOne("Sharebook.Data.Models.Post.Properties.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<long>("PostId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("PostId");

                            b1.ToTable("Posts");

                            b1.WithOwner()
                                .HasForeignKey("PostId");
                        });

                    b.OwnsOne("Sharebook.Data.Models.Post.Properties.Geo", "Geo", b1 =>
                        {
                            b1.Property<long>("PostId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("Type")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PostId");

                            b1.ToTable("Posts");

                            b1.WithOwner()
                                .HasForeignKey("PostId");
                        });

                    b.OwnsOne("Sharebook.Data.Models.Post.Properties.Place", "Place", b1 =>
                        {
                            b1.Property<long>("PostId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CountryCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FullName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Id")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("PlaceType")
                                .HasColumnType("int");

                            b1.Property<string>("Url")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PostId");

                            b1.ToTable("Posts");

                            b1.WithOwner()
                                .HasForeignKey("PostId");

                            b1.OwnsOne("Sharebook.Data.Models.Post.Properties.Geo", "BoundingBox", b2 =>
                                {
                                    b2.Property<long>("PlacePostId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bigint")
                                        .UseIdentityColumn();

                                    b2.Property<string>("Type")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PlacePostId");

                                    b2.ToTable("Posts");

                                    b2.WithOwner()
                                        .HasForeignKey("PlacePostId");
                                });

                            b1.OwnsOne("Sharebook.Data.Models.Post.Properties.Geo", "Geometry", b2 =>
                                {
                                    b2.Property<long>("PlacePostId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bigint")
                                        .UseIdentityColumn();

                                    b2.Property<string>("Type")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PlacePostId");

                                    b2.ToTable("Posts");

                                    b2.WithOwner()
                                        .HasForeignKey("PlacePostId");
                                });

                            b1.Navigation("BoundingBox");

                            b1.Navigation("Geometry");
                        });

                    b.Navigation("Coordinates");

                    b.Navigation("Geo");

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Settings", b =>
                {
                    b.HasOne("Sharebook.Data.Models.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("Sharebook.Data.Models.Settings", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sharebook.Data.Models.UserClaim", b =>
                {
                    b.HasOne("Sharebook.Data.Models.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Sharebook.Data.Models.UserPhoto", b =>
                {
                    b.HasOne("Sharebook.Data.Models.User", "User")
                        .WithOne("Photo")
                        .HasForeignKey("Sharebook.Data.Models.UserPhoto", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sharebook.Data.Models.UserRole", b =>
                {
                    b.HasOne("Sharebook.Data.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sharebook.Data.Models.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Post.Post", b =>
                {
                    b.Navigation("Hashtags");

                    b.Navigation("Medias");

                    b.Navigation("Symbols");

                    b.Navigation("Urls");

                    b.Navigation("UserMentions");
                });

            modelBuilder.Entity("Sharebook.Data.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Sharebook.Data.Models.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Photo");

                    b.Navigation("Settings");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
