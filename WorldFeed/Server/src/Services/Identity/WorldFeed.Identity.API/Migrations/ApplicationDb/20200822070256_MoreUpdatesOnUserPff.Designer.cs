// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldFeed.Identity.API.Data;

namespace WorldFeed.Identity.API.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200822070256_MoreUpdatesOnUserPff")]
    partial class MoreUpdatesOnUserPff
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WorldFeed.Identity.API.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Blocking")
                        .HasColumnType("bit");

                    b.Property<string>("BusinessProfileState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanMediaTag")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ContributorsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DefaultProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("DefaultProfileImage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<long>("FavouritesCount")
                        .HasColumnType("bigint");

                    b.Property<bool>("FollowRequestSent")
                        .HasColumnType("bit");

                    b.Property<bool>("FollowedBy")
                        .HasColumnType("bit");

                    b.Property<long>("FollowersCount")
                        .HasColumnType("bigint");

                    b.Property<bool>("Following")
                        .HasColumnType("bit");

                    b.Property<int>("FriendsCount")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("GeoEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCustomTimelines")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTranslationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTranslator")
                        .HasColumnType("bit");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListedCount")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MediaCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("Notifications")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PinnedTweetIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileBackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileBackgroundImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileBackgroundImageUrlHttps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProfileBackgroundTile")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileBannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrlHttps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileLinkColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileSidebarBorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileSidebarFillColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProfileUseBackgroundImage")
                        .HasColumnType("bit");

                    b.Property<bool>("Protected")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireSomeConsent")
                        .HasColumnType("bit");

                    b.Property<string>("ScreenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusesCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeZone")
                        .HasColumnType("datetime2");

                    b.Property<string>("TranslatorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UtcOffset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WorldFeed.Identity.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WorldFeed.Identity.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldFeed.Identity.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WorldFeed.Identity.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldFeed.Identity.API.Models.ApplicationUser", b =>
                {
                    b.OwnsOne("WorldFeed.Identity.API.Models.Birthday.Birthdate", "Birthdate", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Age")
                                .HasColumnType("int");

                            b1.Property<int>("Day")
                                .HasColumnType("int");

                            b1.Property<int>("Month")
                                .HasColumnType("int");

                            b1.Property<int>("Visibility")
                                .HasColumnType("int");

                            b1.Property<int>("VisibilityYear")
                                .HasColumnType("int");

                            b1.Property<int>("Year")
                                .HasColumnType("int");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.OwnsOne("WorldFeed.Identity.API.Models.Entities.Entity", "Entities", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");

                            b1.OwnsOne("WorldFeed.Identity.API.Models.Entities.Description", "Description", b2 =>
                                {
                                    b2.Property<string>("EntityApplicationUserId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.HasKey("EntityApplicationUserId");

                                    b2.ToTable("AspNetUsers");

                                    b2.WithOwner()
                                        .HasForeignKey("EntityApplicationUserId");

                                    b2.OwnsMany("WorldFeed.Identity.API.Models.Entities.Urls.Url", "Urls", b3 =>
                                        {
                                            b3.Property<string>("DescriptionEntityApplicationUserId")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("DisplayUrl")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ExpandedUrl")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UrlPath")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("DescriptionEntityApplicationUserId", "Id");

                                            b3.ToTable("AspNetUsers_Urls");

                                            b3.WithOwner()
                                                .HasForeignKey("DescriptionEntityApplicationUserId");

                                            b3.OwnsOne("WorldFeed.Identity.API.Models.Entities.Indices", "Indices", b4 =>
                                                {
                                                    b4.Property<string>("UrlDescriptionEntityApplicationUserId")
                                                        .HasColumnType("nvarchar(450)");

                                                    b4.Property<int>("UrlId")
                                                        .ValueGeneratedOnAdd()
                                                        .HasColumnType("int")
                                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                                    b4.Property<int>("IndexFirst")
                                                        .HasColumnType("int");

                                                    b4.Property<int>("IndexSecond")
                                                        .HasColumnType("int");

                                                    b4.HasKey("UrlDescriptionEntityApplicationUserId", "UrlId");

                                                    b4.ToTable("AspNetUsers_Urls");

                                                    b4.WithOwner()
                                                        .HasForeignKey("UrlDescriptionEntityApplicationUserId", "UrlId");
                                                });
                                        });
                                });

                            b1.OwnsOne("WorldFeed.Identity.API.Models.Entities.Urls.Url", "Url", b2 =>
                                {
                                    b2.Property<string>("EntityApplicationUserId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("DisplayUrl")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ExpandedUrl")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UrlPath")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("EntityApplicationUserId");

                                    b2.ToTable("AspNetUsers");

                                    b2.WithOwner()
                                        .HasForeignKey("EntityApplicationUserId");

                                    b2.OwnsOne("WorldFeed.Identity.API.Models.Entities.Indices", "Indices", b3 =>
                                        {
                                            b3.Property<string>("UrlEntityApplicationUserId")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("IndexFirst")
                                                .HasColumnType("int");

                                            b3.Property<int>("IndexSecond")
                                                .HasColumnType("int");

                                            b3.HasKey("UrlEntityApplicationUserId");

                                            b3.ToTable("AspNetUsers");

                                            b3.WithOwner()
                                                .HasForeignKey("UrlEntityApplicationUserId");
                                        });
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
