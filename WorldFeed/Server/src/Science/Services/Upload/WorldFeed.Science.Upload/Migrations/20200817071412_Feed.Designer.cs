// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldFeed.Science.API.Data;

namespace WorldFeed.Science.Upload.Migrations
{
    [DbContext(typeof(ScienceUploadDbContext))]
    [Migration("20200817071412_Feed")]
    partial class Feed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WorldFeed.Common.Data.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("serializedData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WorldFeed.Common.Models.WorldFeed.Feed.ExtendedEntities.VideoFeedEntityVariant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Bitrate")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VideoFeedInformationEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VideoFeedInformationEntityId");

                    b.ToTable("VideoFeedEntityVariant");
                });

            modelBuilder.Entity("WorldFeed.Common.Models.WorldFeed.Feed.ExtendedEntities.VideoFeedInformationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspectRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationInMilliseconds")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VideoFeedInformationEntity");
                });

            modelBuilder.Entity("WorldFeed.Common.Models.WorldFeed.Feed.Properties.Coordinates", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GeoFeedId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeoFeedId");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("WorldFeed.Common.Models.WorldFeed.Feed.Properties.GeoFeed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GeoFeed");
                });

            modelBuilder.Entity("WorldFeed.Common.Models.WorldFeed.Feed.Properties.PlaceFeed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BoundingBoxId")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GeometryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PlaceFeedId")
                        .HasColumnType("bigint");

                    b.Property<int>("PlaceType")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoundingBoxId");

                    b.HasIndex("GeometryId");

                    b.HasIndex("PlaceFeedId");

                    b.ToTable("PlaceFeed");
                });

            modelBuilder.Entity("WorldFeed.Common.Models.WorldFeed.MediaEntitySize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Resize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MediaEntitySize");
                });

            modelBuilder.Entity("WorldFeed.Common.Models.WorldFeed.MediaSizeObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LargeId")
                        .HasColumnType("int");

                    b.Property<int?>("MediumId")
                        .HasColumnType("int");

                    b.Property<int?>("SmallId")
                        .HasColumnType("int");

                    b.Property<int?>("ThumbId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LargeId");

                    b.HasIndex("MediumId");

                    b.HasIndex("SmallId");

                    b.HasIndex("ThumbId");

                    b.ToTable("MediaSizeObject");
                });

            modelBuilder.Entity("WorldFeed.Science.API.Data.Models.FeedEntities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FeedEntities");
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.ExtendedEntities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExtendedEntities");
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.Feed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contributors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CoordinatesId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("EntitiesId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExtendedEntitiesId")
                        .HasColumnType("bigint");

                    b.Property<int>("FavoriteCount")
                        .HasColumnType("int");

                    b.Property<bool>("Favorited")
                        .HasColumnType("bit");

                    b.Property<string>("FullText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GeoId")
                        .HasColumnType("bigint");

                    b.Property<string>("InReplyToScreenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InReplyToStatusId")
                        .HasColumnType("int");

                    b.Property<string>("InReplyToStatusIdStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InReplyToUserId")
                        .HasColumnType("int");

                    b.Property<string>("InReplyToUserIdStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuoteStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("PlaceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("PossiblySensitive")
                        .HasColumnType("bit");

                    b.Property<bool>("PossiblySensitiveEditable")
                        .HasColumnType("bit");

                    b.Property<int>("QuoteCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("int");

                    b.Property<int>("RetweetCount")
                        .HasColumnType("int");

                    b.Property<bool>("Retweeted")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplementalLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Truncated")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatesId");

                    b.HasIndex("EntitiesId");

                    b.HasIndex("ExtendedEntitiesId");

                    b.HasIndex("GeoId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.HashtagFeedEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FeedEntitiesId")
                        .HasColumnType("bigint");

                    b.Property<string>("Indices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeedEntitiesId");

                    b.ToTable("HashtagFeedEntity");
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.Media", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Directory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpandedUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtAltText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExtMediaAvailability")
                        .HasColumnType("int");

                    b.Property<string>("ExtMediaColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FeedId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MediaKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaSizeObjectId")
                        .HasColumnType("int");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrlHttps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeedId");

                    b.HasIndex("MediaSizeObjectId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.MediaFeedEntity", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpandedURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ExtendedEntitiesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FeedEntitiesId")
                        .HasColumnType("bigint");

                    b.Property<string>("IdStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaURLHttps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VideoFeedInformationEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExtendedEntitiesId");

                    b.HasIndex("FeedEntitiesId");

                    b.HasIndex("VideoFeedInformationEntityId");

                    b.ToTable("MediaFeedEntity");
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.SymbolFeedEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FeedEntitiesId")
                        .HasColumnType("bigint");

                    b.Property<string>("Indices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeedEntitiesId");

                    b.ToTable("SymbolFeedEntity");
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.UrlFeedEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayedURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpandedURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FeedEntitiesId")
                        .HasColumnType("bigint");

                    b.Property<long>("FeedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Indices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeedEntitiesId");

                    b.HasIndex("FeedId");

                    b.ToTable("UrlFeedEntity");
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.UserMentionFeedEntity", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("FeedEntitiesId")
                        .HasColumnType("bigint");

                    b.Property<string>("IdStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeedEntitiesId");

                    b.ToTable("UserMentionFeedEntity");
                });

            modelBuilder.Entity("WorldFeed.Common.Models.WorldFeed.Feed.ExtendedEntities.VideoFeedEntityVariant", b =>
                {
                    b.HasOne("WorldFeed.Common.Models.WorldFeed.Feed.ExtendedEntities.VideoFeedInformationEntity", null)
                        .WithMany("Variants")
                        .HasForeignKey("VideoFeedInformationEntityId");
                });

            modelBuilder.Entity("WorldFeed.Common.Models.WorldFeed.Feed.Properties.Coordinates", b =>
                {
                    b.HasOne("WorldFeed.Common.Models.WorldFeed.Feed.Properties.GeoFeed", null)
                        .WithMany("Coordinates")
                        .HasForeignKey("GeoFeedId");
                });

            modelBuilder.Entity("WorldFeed.Common.Models.WorldFeed.Feed.Properties.PlaceFeed", b =>
                {
                    b.HasOne("WorldFeed.Common.Models.WorldFeed.Feed.Properties.GeoFeed", "BoundingBox")
                        .WithMany()
                        .HasForeignKey("BoundingBoxId");

                    b.HasOne("WorldFeed.Common.Models.WorldFeed.Feed.Properties.GeoFeed", "Geometry")
                        .WithMany()
                        .HasForeignKey("GeometryId");

                    b.HasOne("WorldFeed.Common.Models.WorldFeed.Feed.Properties.PlaceFeed", null)
                        .WithMany("ContainedWithin")
                        .HasForeignKey("PlaceFeedId");
                });

            modelBuilder.Entity("WorldFeed.Common.Models.WorldFeed.MediaSizeObject", b =>
                {
                    b.HasOne("WorldFeed.Common.Models.WorldFeed.MediaEntitySize", "Large")
                        .WithMany()
                        .HasForeignKey("LargeId");

                    b.HasOne("WorldFeed.Common.Models.WorldFeed.MediaEntitySize", "Medium")
                        .WithMany()
                        .HasForeignKey("MediumId");

                    b.HasOne("WorldFeed.Common.Models.WorldFeed.MediaEntitySize", "Small")
                        .WithMany()
                        .HasForeignKey("SmallId");

                    b.HasOne("WorldFeed.Common.Models.WorldFeed.MediaEntitySize", "Thumb")
                        .WithMany()
                        .HasForeignKey("ThumbId");
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.Feed", b =>
                {
                    b.HasOne("WorldFeed.Common.Models.WorldFeed.Feed.Properties.Coordinates", "Coordinates")
                        .WithMany()
                        .HasForeignKey("CoordinatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldFeed.Science.API.Data.Models.FeedEntities", "Entities")
                        .WithMany()
                        .HasForeignKey("EntitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldFeed.Science.Upload.Data.Models.ExtendedEntities", "ExtendedEntities")
                        .WithMany()
                        .HasForeignKey("ExtendedEntitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldFeed.Common.Models.WorldFeed.Feed.Properties.GeoFeed", "Geo")
                        .WithMany()
                        .HasForeignKey("GeoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldFeed.Common.Models.WorldFeed.Feed.Properties.PlaceFeed", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.HashtagFeedEntity", b =>
                {
                    b.HasOne("WorldFeed.Science.API.Data.Models.FeedEntities", null)
                        .WithMany("Hashtags")
                        .HasForeignKey("FeedEntitiesId");
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.Media", b =>
                {
                    b.HasOne("WorldFeed.Science.Upload.Data.Models.Feed", "Feed")
                        .WithMany()
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldFeed.Common.Models.WorldFeed.MediaSizeObject", "Sizes")
                        .WithMany()
                        .HasForeignKey("MediaSizeObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.MediaFeedEntity", b =>
                {
                    b.HasOne("WorldFeed.Science.Upload.Data.Models.ExtendedEntities", null)
                        .WithMany("Media")
                        .HasForeignKey("ExtendedEntitiesId");

                    b.HasOne("WorldFeed.Science.API.Data.Models.FeedEntities", null)
                        .WithMany("Medias")
                        .HasForeignKey("FeedEntitiesId");

                    b.HasOne("WorldFeed.Common.Models.WorldFeed.Feed.ExtendedEntities.VideoFeedInformationEntity", "VideoDetails")
                        .WithMany()
                        .HasForeignKey("VideoFeedInformationEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.SymbolFeedEntity", b =>
                {
                    b.HasOne("WorldFeed.Science.API.Data.Models.FeedEntities", null)
                        .WithMany("Symbols")
                        .HasForeignKey("FeedEntitiesId");
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.UrlFeedEntity", b =>
                {
                    b.HasOne("WorldFeed.Science.API.Data.Models.FeedEntities", null)
                        .WithMany("Urls")
                        .HasForeignKey("FeedEntitiesId");

                    b.HasOne("WorldFeed.Science.Upload.Data.Models.Feed", "Feed")
                        .WithMany()
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldFeed.Science.Upload.Data.Models.UserMentionFeedEntity", b =>
                {
                    b.HasOne("WorldFeed.Science.API.Data.Models.FeedEntities", null)
                        .WithMany("UserMentions")
                        .HasForeignKey("FeedEntitiesId");
                });
#pragma warning restore 612, 618
        }
    }
}
